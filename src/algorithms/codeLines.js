export const codeLines = [
    `<span class="keyword">const</span> <span class="variable">ASIZE</span> = <span class="number">256</span>;`,
    `<span class="keyword">export</span> <span class="keyword">function</span> <span class="function">myAlgorithm</span>(<span class="variable">text</span>, <span class="variable">pattern</span>) {`,
    `  <span class="keyword">function</span> <span class="function">preBmBc</span>(<span class="variable">pattern</span>, <span class="variable">m</span>, <span class="variable">bmBc</span>) {`,
    `    <span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">i</span> = <span class="number">0</span>; <span class="variable">i</span> < <span class="variable">ASIZE</span>; ++<span class="variable">i</span>) {`,
    `      <span class="variable">bmBc</span>[<span class="variable">i</span>] = <span class="variable">m</span>;`,
    `    }`,
    `    <span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">i</span> = <span class="number">0</span>; <span class="variable">i</span> < <span class="variable">m</span> - <span class="number">1</span>; ++<span class="variable">i</span>) {`,
    `      <span class="variable">bmBc</span>[<span class="variable">pattern</span>.<span class="function">charCodeAt</span>(<span class="variable">i</span>)] = <span class="variable">m</span> - <span class="variable">i</span> - <span class="number">1</span>;`,
    `    }`,
    `  }`,
    `  <span class="keyword">function</span> <span class="function">memset</span>(<span class="variable">text</span>, <span class="variable">character</span>, <span class="variable">m</span>) {`,
    `    <span class="keyword">let</span> <span class="variable">aux</span> = "";`,
    `    <span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">i</span> = <span class="number">0</span>; <span class="variable">i</span> < <span class="variable">m</span>; <span class="variable">i</span>++) {`,
    `      <span class="variable">aux</span> += <span class="variable">character</span>;`,
    `    }`,
    `    <span class="keyword">return</span> <span class="variable">text</span> + <span class="variable">aux</span>;`,
    `  }`,
    `  <span class="keyword">function</span> <span class="function">memcmp</span>(<span class="variable">text</span>, <span class="variable">j</span>, <span class="variable">m</span>, <span class="variable">pattern</span>) {`,
    `    <span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">i</span> = <span class="number">0</span>; <span class="variable">i</span> < <span class="variable">m</span>; <span class="variable">i</span>++) {`,
    `      <span class="keyword">if</span> (<span class="variable">text</span>[<span class="variable">j</span> + <span class="variable">i</span>] !== <span class="variable">pattern</span>[<span class="variable">i</span>]) {`,
    `        <span class="keyword">return</span> <span class="keyword">false</span>;`,
    `      }`,
    `    }`,
    `    <span class="keyword">return</span> <span class="keyword">true</span>;`,
    `  }`,
    `  <span class="keyword">function</span> <span class="function">TUNEDBM</span>(<span class="variable">pattern</span>, <span class="variable">m</span>, <span class="variable">text</span>, <span class="variable">n</span>) {`,
    `    <span class="keyword">let</span> <span class="variable">j</span>, <span class="variable">k</span>, <span class="variable">shift</span>;`,
    `    <span class="keyword">const</span> <span class="variable">bmBc</span> = <span class="keyword">new</span> <span class="keyword">Array</span>(<span class="variable">ASIZE</span>);`,
    `    <span class="keyword">const</span> <span class="variable">indices</span> = [];`,
    `    <span class="function">preBmBc</span>(<span class="variable">pattern</span>, <span class="variable">m</span>, <span class="variable">bmBc</span>);`,
    `    <span class="variable">shift</span> = <span class="variable">bmBc</span>[<span class="variable">pattern</span>.<span class="function">charCodeAt</span>(<span class="variable">m</span> - <span class="number">1</span>)];`,
    `    <span class="variable">bmBc</span>[<span class="variable">pattern</span>.<span class="function">charCodeAt</span>(<span class="variable">m</span> - <span class="number">1</span>)] = <span class="number">0</span>;`,
    `    <span class="variable">text</span> = <span class="function">memset</span>(<span class="variable">text</span>, <span class="variable">pattern</span>[<span class="variable">m</span> - <span class="number">1</span>], <span class="variable">m</span>);`,
    `    <span class="variable">j</span> = <span class="number">0</span>;`,
    `    <span class="keyword">while</span> (<span class="variable">j</span> <= <span class="variable">n</span> - <span class="variable">m</span>) {`,
    `      <span class="variable">k</span> = <span class="variable">bmBc</span>[<span class="variable">text</span>.<span class="function">charCodeAt</span>(<span class="variable">j</span> + <span class="variable">m</span> - <span class="number">1</span>)];`,
    `      <span class="keyword">while</span> (<span class="variable">k</span> !== <span class="number">0</span>) {`,
    `        <span class="variable">j</span> += <span class="variable">k</span>;`,
    `        <span class="variable">k</span> = <span class="variable">bmBc</span>[<span class="variable">text</span>.<span class="function">charCodeAt</span>(<span class="variable">j</span> + <span class="variable">m</span> - <span class="number">1</span>)];`,
    `        <span class="variable">j</span> += <span class="variable">k</span>;`,
    `        <span class="variable">k</span> = <span class="variable">bmBc</span>[<span class="variable">text</span>.<span class="function">charCodeAt</span>(<span class="variable">j</span> + <span class="variable">m</span> - <span class="number">1</span>)];`,
    `        <span class="variable">j</span> += <span class="variable">k</span>;`,
    `        <span class="variable">k</span> = <span class="variable">bmBc</span>[<span class="variable">text</span>.<span class="function">charCodeAt</span>(<span class="variable">j</span> + <span class="variable">m</span> - <span class="number">1</span>)];`,
    `      }`,
    `      <span class="keyword">if</span> (<span class="variable">j</span> <= <span class="variable">n</span> - <span class="variable">m</span> && <span class="function">memcmp</span>(<span class="variable">text</span>, <span class="variable">j</span>, <span class="variable">m</span>, <span class="variable">pattern</span>)) {`,
    `        <span class="variable">indices</span>.<span class="function">push</span>(<span class="variable">j</span>);`,
    `      }`,
    `      <span class="variable">j</span> += <span class="variable">shift</span>;`,
    `    }`,
    `    <span class="keyword">return</span> <span class="variable">indices</span>;`,
    `  }`,
    `  <span class="keyword">const</span> <span class="variable">n</span> = <span class="variable">text</span>.<span class="function">length</span>;`,
    `  <span class="keyword">const</span> <span class="variable">m</span> = <span class="variable">pattern</span>.<span class="function">length</span>;`,
    `  <span class="keyword">const</span> <span class="variable">indices</span> = <span class="function">TUNEDBM</span>(<span class="variable">pattern</span>, <span class="variable">m</span>, <span class="variable">text</span>, <span class="variable">n</span>);`,
    `  <span class="keyword">return</span> <span class="variable">indices</span>;`,
    `}`,
  ];
  